{"version":3,"sources":["game/containers/Store.js","game/globalProps.js","game/functions/getCellDisplayValue.js","game/components/Cell.js","game/components/Matrix.js","game/functions/placeItem.js","game/random.js","game/functions/getNextForecastCells.js","game/functions/updateBoard.js","game/containers/Board.js","game/containers/Forecast.js","game/components/Level.js","game/components/Score.js","game/components/Damage.js","game/functions/startGame.js","game/components/Pause.js","game/containers/GameGrid.js","game/components/GameOver.js","game/containers/Game.js","home/components/NewGame.js","home/components/HighScores.js","home/components/Numbers.js","home/components/Arrows.js","home/components/Crosses.js","home/components/Bombs.js","home/containers/HowToPlayGrid.js","home/containers/HowToPlay.js","home/containers/Home.js","highScores/components/HighScoreRow.js","highScores/components/HighScoreTable.js","highScores/containers/HighScores.js","App.js","reportWebVitals.js","index.js"],"names":["initialRow","rowIndex","row","columnIndex","push","initialBoardCells","initialForecastCells","initialForecastCooldowns","i","initialState","boardCells","forecastCells","forecastCooldowns","selectedItem","selectedItemIndex","damage","step","interval","score","level","levelData","red","green","blue","purple","started","paused","Context","React","createContext","Store","children","useState","state","setState","Provider","value","getCellDisplayValue","upArrow","arrow","rightArrow","downArrow","leftArrow","crossBlue","plus","crossRed","bomb","icon","color","rotation","Cell","props","useContext","greyedOut","className","clickable","includes","getCLickable","rowStart","rowEnd","columnStart","startingColumn","columnEnd","style","gridArea","displayValue","selected","onClick","cellClick","Matrix","cells","rowMap","map","setCell","console","log","undefined","searchForOppositeArrow","place","direction","visibleCells","currentCell","oppositeDirection","up","down","right","left","nextCellInLine","clearVisibleCells","cell","clearCell","forceClear","clearSquare","clearCross","neighbors","filter","neighbor","clearCellResult1","otherRowIndex","clearSquareRowResult","clearSquareRow","otherColumnIndex","clearCellResult","placeItem","slice","length","oppositeArrowResult","probabilityObject","generateItem","choice","object","shallow","Object","keys","array","getChoiceArray","randomIndex","Math","floor","random","result","Array","isArray","item","pushMultiple","times","getNextForecastCells","previousForecastCells","previousSelectedItemIndex","chooseEmptyCell","previousState","emptyCells","addEmptyCellsFromRow","updateRow","nextCells","addedDamage","chosenCell","updateCell","spreadToNeighbors","spreadToNeighbor","neighborValue","updateBoard","nextDamage","gameOver","clearInterval","Board","previousBoardCells","previousScore","nextBoardCells","nextScore","nextForecastCells","previousLevelData","previousLevel","previousInterval","levelsData","nextLevel","nextLevelData","nextInterval","goal","setInterval","stepSize","Forecast","columns","Level","backgroundColor","name","Score","Damage","startGame","nextForecastCooldowns","fetch","then","response","json","Pause","GameGrid","gridTemplateColumns","GameOver","history","useHistory","onSubmit","event","preventDefault","document","getElementById","dateString","Date","toDateString","data","id","uuidv4","configObject","method","headers","body","JSON","stringify","type","placeholder","Game","NewGame","to","exact","Numbers","Arrows","Crosses","Bombs","HowToPlayGrid","HowToPlay","Home","HighScoreRow","parity","rank","date","HighScoreTable","sortedData","sort","a","b","rowData","index","HighScores","useEffect","GameRoute","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.81292f6a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { rows, columns } from '../globalProps'\n\nconst initialRow = rowIndex => {\n    const row = []\n    for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        row.push('')\n    }\n    return row\n}\n\nconst initialBoardCells = []\nfor (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    initialBoardCells.push(initialRow(rowIndex))\n}\n\nconst initialForecastCells = []\nconst initialForecastCooldowns = []\nfor (let i = 0; i < rows; i++) {\n    initialForecastCells.push([''])\n    initialForecastCooldowns.push(0)\n}\n\nconst initialState = {\n    boardCells: initialBoardCells,\n    forecastCells: initialForecastCells,\n    forecastCooldowns: initialForecastCooldowns,\n    selectedItem: '',\n    selectedItemIndex: 0,\n    damage: 0,\n    step: 0,\n    interval: null,\n    score: 0,\n    level: 0,\n    levelData: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n        purple: 'purple',\n    },\n    started: false,\n    paused: false,\n}\n\nexport const Context = React.createContext()\n\nexport default function Store({ children }) {\n    const [state, setState] = useState(initialState)\n\n    return (\n        <Context.Provider value={[state, setState]}>{children}</Context.Provider>\n    )\n\n    \n}","export const rows = 8\nexport const columns = 8\nexport const stepSize = 1500\nexport const maxDamage = 999","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowUp as arrow, faPlus as plus, faBomb as bomb } from '@fortawesome/free-solid-svg-icons'\n\nconst getCellDisplayValue = (value, levelData) => {\n    if (!levelData) {\n        return '?'\n    }\n    if (typeof value === 'number' || value === '') {\n        return value\n    }\n    const [icon, color, rotation] = {\n        upArrow: [arrow, levelData.green, 0],\n        rightArrow: [arrow, levelData.green, 90],\n        downArrow: [arrow, levelData.green, 180],\n        leftArrow: [arrow, levelData.green, 270],\n        crossBlue: [plus, levelData.blue, 0],\n        crossRed: [plus, levelData.red, 0],\n        bomb:  [bomb, levelData.red, 0],\n    }[value]\n    return <FontAwesomeIcon icon={icon} color={color} rotation={rotation} />\n}\n\nexport default getCellDisplayValue","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport getCellDisplayValue from '../functions/getCellDisplayValue'\n\nexport default function Cell(props) {\n    // console.log('Cell')\n\n    // const [state, setState] = useContext(Context)\n    const state = useContext(Context)[0]\n    const value = props.value\n\n    const levelData = state.levelData\n\n    const getGreyedOut = () => {\n        if (props.className !== 'forecast' || !state.started || state.paused) {\n            return false\n        }\n        return state.forecastCooldowns[props.rowIndex] > state.step\n    }\n\n    const getCLickable = greyedOut => {\n        if (greyedOut || state.paused) {\n            return false\n        }\n        if (props.className === 'forecast') {\n            return props.rowIndex !== state.selectedItemIndex\n        }\n        if (value === '') {\n            return true\n        }\n        const selectedItem = state.selectedItem\n        return selectedItem.includes('Blue')\n    }\n\n    const greyedOut = getGreyedOut()\n\n    const clickable = getCLickable(greyedOut)\n\n    const handleClick = () => {\n        if (!clickable) {\n            return\n        }\n        props.cellClick(props.rowIndex, props.columnIndex)\n    }\n\n    const rowStart = props.rowIndex + 1\n    const rowEnd = rowStart + 1\n    const columnStart = props.startingColumn + props.columnIndex\n    const columnEnd = columnStart + 1\n\n    const style = {\n        gridArea: `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`\n    }\n    if (typeof value === 'number') {\n        style.color = levelData.purple\n    }\n\n    const displayValue = state.paused || !state.started ? '' : getCellDisplayValue(value, state.levelData)\n\n    const selected = props.className === 'forecast' && props.rowIndex === state.selectedItemIndex\n    return (\n        <div\n            className={`cell cell-${props.className}${clickable ? ' clickable' : ''}${selected ? ' selected' : ''}${greyedOut ? ' greyed-out' : ''}`}\n            onClick={handleClick}\n            style={style}\n        >\n            <div className=\"cell-value\">{displayValue}</div>\n        </div>\n    )\n}","import Cell from './Cell'\n\nexport default function Matrix(props) {\n    const cells = props.cells\n\n    const rowMap = (row, rowIndex) => {\n        if (typeof row !== 'object') {\n            console.log('non-object')\n            return\n        }\n        return row.map((value, columnIndex) => <Cell\n            key={`cell-${columnIndex},${rowIndex}`}\n            rowIndex={rowIndex}\n            columnIndex={columnIndex}\n            value={value}\n            setCell={props.setCell}\n            className={props.className}\n            startingColumn={props.startingColumn}\n            cellClick={props.cellClick}\n        />)\n    }\n    if (cells === undefined) {\n        console.log('cells undefined')\n        console.log(props.className)\n        return\n    }\n    if (typeof cells[0] === 'object') {\n        return cells.map((row, rowIndex) => rowMap(row, rowIndex))\n    }\n    return rowMap(cells, 0)\n}","import { rows, columns } from '../globalProps'\n\nconst placeItem = (selectedItem, boardCells, rowIndex, columnIndex, score) => {\n    let place = true;\n    if (selectedItem === 'crossBlue') {\n        return clearCross(boardCells, rowIndex, columnIndex, score)\n    }\n    if (selectedItem.includes('Arrow')) {\n        const direction = selectedItem.slice(0, selectedItem.length - 5)\n        const oppositeArrowResult = searchForOppositeArrow(boardCells, score, place, direction, rowIndex, columnIndex)\n        boardCells = oppositeArrowResult[0]\n        score = oppositeArrowResult[1]\n        place = oppositeArrowResult[2]\n    }\n    if (place) {\n        boardCells[rowIndex][columnIndex] = selectedItem\n    }\n    return [boardCells, score]\n}\n\nconst searchForOppositeArrow = (boardCells, score, place, direction, rowIndex, columnIndex) => {\n    const visibleCells = [[rowIndex, columnIndex]]\n    let currentCell = []\n    currentCell.push(rowIndex)\n    currentCell.push(columnIndex)\n    const oppositeDirection = {up: 'down', down: 'up', right: 'left', left: 'right'}[direction]\n    for (let i = 0; i < 12; i++) {\n        currentCell = nextCellInLine(currentCell, direction)\n        if (!currentCell) {\n            break\n        }\n        visibleCells.push([currentCell[0], currentCell[1]])\n        if (boardCells[currentCell[0]][currentCell[1]] === `${oppositeDirection}Arrow`) {\n            [boardCells, score] = clearVisibleCells(visibleCells, boardCells, score)\n            place = false\n            break\n        }\n    }\n    return [boardCells, score, place]\n}\n\nconst nextCellInLine = (currentCell, direction) => {\n    switch (direction) {\n        case 'up':\n            currentCell[0]--\n            break\n        case 'right':\n            currentCell[1]++\n            break\n        case 'down':\n            currentCell[0]++\n            break\n        case 'left':\n            currentCell[1]--\n            break\n        default:\n    }\n    if (\n        currentCell[0] < 0 ||\n        currentCell[1] < 0 ||\n        currentCell[0] >= rows ||\n        currentCell[1] >= columns\n    ) {\n        return null\n    }\n    return currentCell\n}\n\nfunction clearVisibleCells(visibleCells, boardCells, score) {\n    for (const cell of visibleCells) {\n        [boardCells, score] = clearCell(boardCells, cell[0], cell[1], score)\n    }\n    return [boardCells, score]\n}\n\nconst clearCell = (boardCells, rowIndex, columnIndex, score, forceClear=false) => {\n    const value = boardCells[rowIndex][columnIndex]\n    if (value === 'bomb' && !forceClear) {\n        return clearSquare(boardCells, rowIndex, columnIndex, score)\n    }\n    if (typeof value === 'number') {\n        score += value\n    }\n    boardCells[rowIndex][columnIndex] = ''\n    return [boardCells, score]\n}\n\nconst clearCross = (boardCells, rowIndex, columnIndex, score) => {\n    if (boardCells[rowIndex][columnIndex] === 'bomb') {\n        return clearSquare(boardCells, rowIndex, columnIndex, score)\n    }\n    [boardCells, score] = clearCell(boardCells, rowIndex, columnIndex, score, true)\n    const neighbors = [\n        [rowIndex + 1, columnIndex],\n        [rowIndex - 1, columnIndex],\n        [rowIndex, columnIndex + 1],\n        [rowIndex, columnIndex - 1],\n    ].filter(neighbor => (\n        neighbor[0] >= 0 &&\n        neighbor[1] >= 0 &&\n        neighbor[0] < rows &&\n        neighbor[1] < columns\n    ))\n    for (const neighbor of neighbors) {\n        [boardCells, score] = clearCell(boardCells, neighbor[0], neighbor[1], score)\n    }\n    return [boardCells, score]\n}\n\nconst clearSquare = (boardCells, rowIndex, columnIndex, score) => {\n    const clearCellResult1 = clearCell(boardCells, rowIndex, columnIndex, score, true)\n    boardCells = clearCellResult1[0]\n    score = clearCellResult1[1]\n    for (const otherRowIndex of [\n        rowIndex - 1,\n        rowIndex,\n        rowIndex + 1\n    ].filter(otherRowIndex => otherRowIndex >= 0 && otherRowIndex < rows)) {\n        const clearSquareRowResult = clearSquareRow(boardCells, score, rowIndex, columnIndex, otherRowIndex)\n        boardCells = clearSquareRowResult[0]\n        score = clearSquareRowResult[1]\n    }\n    return [boardCells, score]\n}\n\nconst clearSquareRow = (boardCells, score, rowIndex, columnIndex, otherRowIndex) => {\n    for (const otherColumnIndex of [\n        columnIndex - 1,\n        columnIndex,\n        columnIndex + 1\n    ].filter(otherColumnIndex => (\n        otherColumnIndex >= 0 &&\n        otherColumnIndex < columns &&\n        (rowIndex !== otherRowIndex || columnIndex !== otherColumnIndex)\n    ))) {\n        const clearCellResult = clearCell(boardCells, otherRowIndex, otherColumnIndex, score)\n        boardCells = clearCellResult[0]\n        score = clearCellResult[1]\n    }\n    return [boardCells, score]\n}\n\nexport default placeItem","const probabilityObject = {\n    upArrow: 1,\n    rightArrow: 1,\n    downArrow: 1,\n    leftArrow: 1,\n    crossBlue: 1,\n    // crossRed: 1,\n    bomb: 1,\n}\n\nexport const generateItem = () => choice(probabilityObject)\n\nexport function choice(object, shallow=false) {\n    if (Object.keys(object).length === 0) {\n        return null\n    }\n    const array = getChoiceArray(object)\n    const randomIndex = Math.floor(Math.random() * array.length)\n    const result = array[randomIndex]\n    if (!shallow && typeof result === 'object') {\n        return choice(result)\n    }\n    return result\n}\n\nfunction getChoiceArray(object) {\n    if (Array.isArray(object)) {\n        return object\n    }\n    const array = []\n    for (const item in object) {\n        pushMultiple(array, item, object[item])\n    }\n    return array\n}\n\nfunction pushMultiple(array, item, times) {\n    for (let i = 0; i < times; i++) {\n        array.push(item)\n    }\n    return array\n} \n\n","import { generateItem } from '../random'\n\nconst getNextForecastCells = (previousForecastCells, previousSelectedItemIndex) => {\n    return [\n        ...previousForecastCells.slice(0, previousSelectedItemIndex),\n        ...previousForecastCells.slice(previousSelectedItemIndex + 1),\n        [generateItem()],\n    ]\n}\n\nexport default getNextForecastCells","import { rows, columns, maxDamage } from \"../globalProps\"\nimport { choice } from '../random'\n\nconst updateBoard = setState => {\n    setState(previousState => {\n        if (previousState.paused) {\n            return previousState\n        }\n        const chosenCell = chooseEmptyCell(previousState)\n        let addedDamage = 0\n        const previousCells = previousState.boardCells\n        const nextCells = previousCells.map(row => {\n            return row.map(value => typeof value === 'number' ? value + 1 : value)\n        })\n        for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n            addedDamage = updateRow(nextCells, rowIndex, addedDamage, chosenCell)\n        }\n        const nextDamage = previousState.damage + addedDamage\n        const gameOver = nextDamage > maxDamage\n        if (gameOver) {\n            clearInterval(previousState.interval)\n        }\n        const nextState = {\n            ...previousState,\n            damage: nextDamage,\n            boardCells: nextCells,\n            step: previousState.step + 1,\n            gameOver: gameOver\n        }\n        return nextState\n    })\n}\n\nconst chooseEmptyCell = previousState => {\n    if (previousState.step % 10 !== 0) {\n        return null\n    }\n    let emptyCells = []\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n        emptyCells = addEmptyCellsFromRow(emptyCells, rowIndex, previousState.boardCells)\n    }\n    return choice(emptyCells, true)\n}\n\nconst addEmptyCellsFromRow = (emptyCells, rowIndex, boardCells) => {\n    const row = boardCells[rowIndex]\n    for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        const value = row[columnIndex]\n        value === '' && emptyCells.push([rowIndex, columnIndex])\n    }\n    return emptyCells\n}\n\nconst updateRow = (nextCells, rowIndex, addedDamage, chosenCell) => {\n    for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        const value = nextCells[rowIndex][columnIndex]\n        addedDamage = updateCell(value, nextCells, rowIndex, columnIndex, addedDamage, chosenCell)\n    }\n    return addedDamage\n}\n\nconst updateCell = (value, nextCells, rowIndex, columnIndex, addedDamage, chosenCell) => {\n    if (typeof value === 'number' && value > 9) {\n        nextCells[rowIndex][columnIndex] = 9\n        return addedDamage + spreadToNeighbors(rowIndex, columnIndex, nextCells, addedDamage)\n    }\n    if (chosenCell && chosenCell[0] === rowIndex && chosenCell[1] === columnIndex) {\n        nextCells[rowIndex][columnIndex] = 1\n    }\n    return addedDamage\n}\n\nconst spreadToNeighbors = (rowIndex, columnIndex, nextCells, addedDamage) => {\n    const possibleNeighbors = [\n        [rowIndex, columnIndex + 1],\n        [rowIndex, columnIndex - 1],\n        [rowIndex + 1, columnIndex],\n        [rowIndex - 1, columnIndex],\n    ]\n    const neighbors = possibleNeighbors.filter(neighbor => (\n        neighbor[0] >= 0 &&\n        neighbor[1] >= 0 &&\n        neighbor[0] < rows &&\n        neighbor[1] < columns\n    ))\n    for (const neighbor of neighbors) {\n        addedDamage = spreadToNeighbor(nextCells, neighbor, addedDamage)\n    }\n    return addedDamage\n}\n\nconst spreadToNeighbor = (nextCells, neighbor, addedDamage) => {\n    const neighborValue = nextCells[neighbor[0]][neighbor[1]]\n    if (neighborValue === '') {\n        nextCells[neighbor[0]][neighbor[1]] = 1\n        return 0\n    }\n    if (typeof neighborValue === 'number') {\n        neighborValue >= 9 ? addedDamage++ : nextCells[neighbor[0]][neighbor[1]] += 1\n    }\n    return addedDamage\n}\n\nexport default updateBoard","import { useContext } from 'react'\nimport { Context } from './Store'\nimport Matrix from '../components/Matrix'\nimport placeItem from '../functions/placeItem'\nimport getNextForecastCells from '../functions/getNextForecastCells'\nimport updateBoard from '../functions/updateBoard'\n \n export default function Board(props) {\n    const [state, setState] = useContext(Context)\n\n    const cellClick = (rowIndex, columnIndex) => {\n        const previousBoardCells = state.boardCells\n        const previousForecastCells = state.forecastCells\n        const previousSelectedItemIndex = state.selectedItemIndex\n        const previousScore = state.score\n        const [nextBoardCells, nextScore] = placeItem(state.selectedItem, previousBoardCells, rowIndex, columnIndex, previousScore, state.levelData)\n        const nextForecastCells = getNextForecastCells(previousForecastCells, previousSelectedItemIndex)\n        const forecastCooldowns = state.forecastCooldowns\n        const previousLevelData = state.levelData\n        if (previousSelectedItemIndex > 0) {\n            forecastCooldowns[previousSelectedItemIndex] = state.step + 5 * previousSelectedItemIndex\n        }\n        const previousLevel = state.level\n        const previousInterval = state.interval\n        const levelsData = state.levelsData\n        let nextLevel = previousLevel, nextLevelData = previousLevelData, nextInterval = previousInterval\n        if (nextScore >= state.levelData.goal && levelsData.length > previousLevel + 1) {\n            nextLevel += 1\n            nextLevelData = levelsData[nextLevel]\n            clearInterval(previousInterval)\n            nextInterval = setInterval(() => {\n                updateBoard(setState)\n            }, nextLevelData.stepSize)\n        }\n        setState({\n            ...state,\n            boardCells: nextBoardCells,\n            forecastCells: nextForecastCells,\n            score: nextScore,\n            selectedItemIndex: 0,\n            selectedItem: nextForecastCells[0][0],\n            forecastCooldowns: forecastCooldowns,\n            levelData: nextLevelData,\n            level: nextLevel,\n            interval: nextInterval,\n        })\n    }\n\n    \n\n    return (\n        <Matrix\n            cells={state.boardCells}\n            className='board'\n            startingColumn={1}\n            cellClick={cellClick}\n        />\n    )\n}","import Matrix from '../components/Matrix'\nimport { useContext } from 'react'\nimport { Context } from './Store'\nimport { columns } from '../globalProps'\n\n\nexport default function Forecast(props) {\n   \n    const [state, setState] = useContext(Context)\n\n    const cellClick = (rowIndex) => {\n        setState({\n            ...state,\n            selectedItemIndex: rowIndex,\n            selectedItem: state.forecastCells[rowIndex][0],\n        })\n    }\n\n\n\n    return (\n        <Matrix\n            cells={state.forecastCells}\n            className='forecast'\n            startingColumn={columns + 2}\n            cellClick={cellClick}\n        />\n    )\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\n\nexport default function Level(props) {\n    const state = useContext(Context)[0]\n    const levelData = state.levelData\n    const style = {\n        gridArea: `1 / ${columns + 4} / 3 / ${columns + 9}`,\n        backgroundColor: levelData.green,\n    }\n\n    return (\n        <div className=\"level panel\" style={style}>\n            {state.started && `Level ${state.level} - ${levelData.name}`}\n        </div>\n    )\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\n\nexport default function Score(props) {\n    const state = useContext(Context)[0]\n    const levelData = state.levelData\n    const style = {\n        gridArea: `3 / ${columns + 4} / 5 / ${columns + 9}`,\n        backgroundColor: levelData.red,\n    }\n\n    return (\n        <div className=\"score panel\" style={style}>\n            {state.started && `Score: ${state.score} / ${levelData.goal}`}\n        </div>\n    )\n\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\n\nexport default function Damage(props) {\n    const state = useContext(Context)[0]\n    const levelData = state.levelData\n    const style = {\n        gridArea: `5 / ${columns + 4} / 7 / ${columns + 9}`,\n        backgroundColor: levelData.purple,\n    }\n\n    return (\n        <div className=\"damage panel\" style={style}>\n            {state.started && `Damage: ${state.damage}`}\n        </div>\n    )\n} ","import { generateItem } from '../random'\nimport updateBoard from './updateBoard'\nimport { rows } from '../globalProps'\n\nconst startGame = (state, setState) => {\n    const nextForecastCells = initialForecastCells()\n    const nextForecastCooldowns = []\n    for (let i = 0; i < rows; i++) {\n        nextForecastCooldowns.push(0)\n    }\n    fetch('https://jbmbroomfield.github.io/Data/levels_data.json')\n    .then(response => response.json())\n    .then(json => {\n        const levelData = json[0]\n        console.log({state})\n        setState({\n            ...state,\n            levelsData: json,\n            levelData: levelData,\n            forecastCells: nextForecastCells,\n            forecastCooldowns: nextForecastCooldowns,\n            selectedItem: nextForecastCells[0][0],\n            interval: setInterval(() => {\n                updateBoard(setState)\n            }, levelData.stepSize),\n            started: true,\n        })\n    })\n}\n\nconst initialForecastCells = () => {\n    const result = []\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n        result.push([generateItem()])\n    }\n    return result\n}\n\nexport default startGame","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\nimport startGame from '../functions/startGame'\n\nexport default function Pause(props) {\n    const [state, setState] = useContext(Context)\n\n    const levelData = state.levelData\n    const style = {\n        gridArea: `7 / ${columns + 4} / 9 / ${columns + 9}`,\n        backgroundColor: levelData.blue,\n    }\n\n    const value = state.started ? (state.paused ? 'Resume' : 'Pause') : 'Start'\n\n    const handleClick = () => {\n        if (!state.started) {\n            startGame(state, setState)\n            return\n        }\n        setState({\n            ...state,\n            paused: !state.paused\n        })\n    }\n\n    return (\n        <div className=\"pause panel clickable\" style={style} onClick={handleClick}>\n            {value}\n        </div>\n    )\n}","import Board from './Board'\nimport Forecast from './Forecast'\nimport Level from '../components/Level'\nimport Score from '../components/Score'\nimport Damage from '../components/Damage'\nimport Pause from '../components/Pause'\nimport { columns } from '../globalProps'\n\n\nexport default function GameGrid(props) {\n\n    const style = {\n        gridTemplateColumns: `repeat(${columns + 8}, 1fr)`,\n    }\n\n    return (\n        <div className='game-grid' style={style}>\n            <Board />\n            <Forecast />\n            <Level />\n            <Score />\n            <Damage />\n            <Pause />\n        </div>\n    )\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useHistory } from 'react-router-dom'\n\nexport default function GameOver(props) {\n\n    const state = useContext(Context)[0]\n    const history = useHistory()\n\n    const submitHighScore = event => {\n        event.preventDefault()\n        const url = `http://localhost:3000/high_scores_db`\n        // const url = 'https://my-json-server.typicode.com/jbmbroomfield/phase-2-project-json-server/high_scores_db'\n        const nameText = document.getElementById('name-text')\n        const name = nameText.value\n        const levelData = state.levelData\n        const date = new Date()\n        const dateString = date.toDateString()\n        const data = {\n            \"name\": name,\n            \"score\": state.score,\n            \"level\": `${levelData.id} - ${levelData.name}`,\n            \"date\": dateString,\n            \"id\": uuidv4(),\n        }\n        const configObject = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n        fetch(url, configObject)\n        history.push('/phase-2-project/high-scores')\n    }\n\n    return (\n        <div>\n            <h1>Game Over! You scored {state.score} points.</h1>\n            <form onSubmit={submitHighScore}>\n                <input type=\"text\" id=\"name-text\" placeholder=\"Your name\" />\n                <input id=\"submit-button\" type=\"submit\" value=\"Submit Score\" />\n            </form>\n        </div>\n    )\n}","import { useContext } from 'react'\nimport GameGrid from './GameGrid'\nimport GameOver from '../components/GameOver'\nimport { Context } from './Store'\n\n\nexport default function Game(props) {\n    const state = useContext(Context)[0]\n    return (\n        <div className='game'>\n            {state.gameOver ? <GameOver /> : <GameGrid />}\n        </div>\n    )\n}","import { Link } from 'react-router-dom'\n\nexport default function NewGame(props) {\n    return (\n        <div className=\"new-game\">\n            <Link\n                to=\"/phase-2-project/game\"\n                exact\n            >\n                New Game\n            </Link>\n        </div>\n    )\n}","import { Link } from 'react-router-dom'\n\nexport default function NewGame(props) {\n    return (\n        <div className=\"high-scores\">\n            <Link\n                to=\"/phase-2-project/high-scores\"\n                exact\n            >\n                High Scores\n            </Link>\n        </div>\n    )\n}","export default function Numbers(props) {\n    return (\n        <>\n            <div className=\"text\">\n                Numbers will grow on the board from 1 to 9.\n                Once they reach 9 they will spread to adjacent cells.\n                If they cannot spread, you will take damage.\n                Take 1000 damage and it's game over.\n                Clear numbers from the board to score points.\n            </div>\n            <div style={{color: 'purple'}}>\n                9\n            </div>\n        </>\n    )\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowUp as arrow } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Arrows(props) {\n    return (\n        <>\n            <div className=\"text\">\n                Place arrows in empty cells.\n                When two arrows point at each other, the cells they occupy and all cells in between are cleared.\n            </div>\n            <div>\n                <FontAwesomeIcon icon={arrow} color='green' rotation={90} /> \n                <FontAwesomeIcon icon={arrow} color='green' rotation={270} />\n            </div>\n        </>\n    )\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus as plus } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Crosses(props) {\n    return (\n        <>\n            <div className=\"text\">\n                Place crosses in any cells. The cell the cross is placed in and the four neighbouring cells are cleared.\n            </div>\n            <div>\n                <FontAwesomeIcon icon={plus} color='blue' />\n            </div>\n        </>\n    )\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBomb as bomb } from '@fortawesome/free-solid-svg-icons'\n\nexport default function Bombs(props) {\n    return (\n        <>\n            <div className=\"text\">\n                Place bombs in empty cells.\n                When a bomb is cleared, it also clears the 8 surrounding cells.\n            </div>\n            <div>\n                <FontAwesomeIcon icon={bomb} color='red' />\n            </div>\n        </>\n    )\n}","import Numbers from '../components/Numbers'\nimport Arrows from '../components/Arrows'\nimport Crosses from '../components/Crosses'\nimport Bombs from '../components/Bombs'\n\nexport default function HowToPlayGrid(props) {\n    return (\n        <div className='how-to-play-grid'>\n            <Numbers />\n            <Arrows />\n            <Crosses />\n            <Bombs />\n        </div>\n    )\n}","import HowToPlayGrid from './HowToPlayGrid'\n\nexport default function HowToPlay(props) {\n    return (\n        <div className='how-to-play'>\n            <h3>How To Play</h3>\n            <HowToPlayGrid />\n        </div>\n    )\n}","import NewGame from '../components/NewGame'\nimport HighScores from '../components/HighScores'\nimport HowToPlay from '../containers/HowToPlay'\n\nexport default function Home(props) {\n    return (\n        <div className=\"home\">\n            <div className=\"heading\">\n                <h1>React Game</h1>\n            </div>\n            <NewGame />\n            <HighScores />\n            <HowToPlay />\n        </div>\n    )\n}","export default function HighScoreRow(props) {\n    const data = props.data\n    const parity = props.rank % 2 === 0 ? 'even' : 'odd'\n    return (\n        <tr className={`row row-${parity}`}>\n            <td className=\"right-align\">{props.rank}</td>\n            <td className=\"left-align\">{data.name}</td>\n            <td>{data.date}</td>\n            <td className=\"left-align\">{data.level}</td>\n            <td className='right-align'>{data.score}</td>\n        </tr>\n    )\n}","import HighScoreRow from './HighScoreRow.js'\n\nexport default function HighScoreTable(props) {\n    const data = props.data\n    const sortedData = data.sort((a, b) => b.score - a.score)\n    return (\n        <table>\n            <tr className=\"row row-even\">\n                <th>Rank</th>\n                <th>Player</th>\n                <th>Date</th>\n                <th>Level</th>\n                <th>Score</th>\n            </tr>\n            {sortedData.map((rowData,index) => <HighScoreRow data={rowData} rank={index + 1}/>)}\n        </table>\n    )\n}","import { useState, useEffect } from 'react'\nimport HighScoreTable from '../components/HighScoreTable'\nimport { Link } from 'react-router-dom'\n\nexport default function HighScores(props) {\n    const [state, setState] = useState([])\n    const url = `http://localhost:3000/high_scores_db`\n    // const url = 'https://my-json-server.typicode.com/jbmbroomfield/phase-2-project-json-server/high_scores_db'\n\n    useEffect(() => {\n        fetch(url)\n        .then(response => response.json())\n        .then(json => {\n            setState(json)\n        })\n    })\n\n    return (\n        <div>\n            <h1>High Scores</h1>\n            <Link\n                to=\"/phase-2-project\"\n                exact\n            >\n                Home\n            </Link>\n            <HighScoreTable data={state} />\n        </div>\n    )\n}","import Game from './game/containers/Game'\nimport Store from './game/containers/Store'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Home from './home/containers/Home'\nimport HighScores from './highScores/containers/HighScores'\n\nfunction GameRoute(props) {\n\treturn (\n\t\t<Store>\n\t\t\t<Game />\n\t\t</Store>\n\t)\n}\n\nfunction App(props) {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Route exact path=\"/phase-2-project\" component={Home} />\n\t\t\t\t<Route exact path=\"/phase-2-project/game\" component={GameRoute} />\n\t\t\t\t<Route exact path=\"/phase-2-project/high-scores\" component={HighScores} />\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}