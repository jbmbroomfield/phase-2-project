{"version":3,"sources":["game/containers/Store.js","game/globalProps.js","game/images/downArrow.png","game/images/crossBlue.png","game/images/crossRed.png","game/images/bomb.png","game/functions/getCellDisplayValue.js","game/components/Cell.js","game/components/Matrix.js","game/functions/placeItem.js","game/random.js","game/functions/getNextForecastCells.js","game/functions/updateBoard.js","game/containers/Board.js","game/containers/Forecast.js","game/components/Level.js","game/components/Score.js","game/components/Damage.js","game/functions/startGame.js","game/components/Pause.js","game/containers/GameGrid.js","game/components/GameOver.js","game/components/Footer.js","game/containers/Game.js","home/components/NewGame.js","home/components/HighScores.js","home/containers/Home.js","highScores/containers/HighScores.js","App.js","reportWebVitals.js","index.js"],"names":["initialRow","rowIndex","row","columnIndex","push","initialBoardCells","initialForecastCells","initialForecastCooldowns","i","initialState","boardCells","forecastCells","forecastCooldowns","selectedItem","selectedItemIndex","damage","step","interval","score","level","levelData","red","green","blue","started","paused","Context","React","createContext","Store","children","useState","state","setState","Provider","value","getCellDisplayValue","upArrow","arrow","rightArrow","downArrow","leftArrow","crossBlue","plus","crossRed","bomb","icon","color","rotation","Cell","props","useContext","greyedOut","className","clickable","includes","getCLickable","rowStart","rowEnd","columnStart","startingColumn","columnEnd","style","gridArea","displayValue","selected","onClick","cellClick","Matrix","cells","rowMap","map","setCell","console","log","undefined","searchForOppositeArrow","place","direction","visibleCells","currentCell","oppositeDirection","up","down","right","left","nextCellInLine","clearVisibleCells","cell","clearCell","forceClear","clearSquare","clearCross","neighbors","filter","neighbor","clearCellResult1","otherRowIndex","clearSquareRowResult","clearSquareRow","otherColumnIndex","clearCellResult","placeItem","slice","length","oppositeArrowResult","probabilityObject","generateItem","choice","object","shallow","Object","keys","array","getChoiceArray","randomIndex","Math","floor","random","result","Array","isArray","item","pushMultiple","times","getNextForecastCells","previousForecastCells","previousSelectedItemIndex","chooseEmptyCell","previousState","emptyCells","addEmptyCellsFromRow","updateRow","nextCells","addedDamage","chosenCell","updateCell","spreadToNeighbors","spreadToNeighbor","neighborValue","updateBoard","nextDamage","gameOver","clearInterval","Board","previousBoardCells","previousScore","nextBoardCells","nextScore","nextForecastCells","previousLevelData","previousLevel","previousInterval","levelsData","nextLevel","nextLevelData","nextInterval","goal","setInterval","stepSize","Forecast","columns","Level","backgroundColor","name","Score","Damage","purple","startGame","fetch","then","response","json","GameGrid","gridTemplateColumns","Pause","GameOver","history","useHistory","onSubmit","event","preventDefault","data","document","getElementById","uuidv4","configObject","method","headers","body","JSON","stringify","type","id","placeholder","Footer","Game","NewGame","to","exact","Home","HighScores","useEffect","d","GameRoute","App","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+HAeA,I,2DATMA,EAAa,SAAAC,GAEf,IADA,IAAMC,EAAM,GACHC,EAAc,EAAGA,ECPP,EDO8BA,IAC7CD,EAAIE,KAAK,IAEb,OAAOF,GAGLG,EAAoB,GACjBJ,EAAW,EAAGA,ECfH,EDeoBA,IACpCI,EAAkBD,KAAKJ,KAO3B,IAFA,IAAMM,EAAuB,GACvBC,EAA2B,GACxBC,EAAI,EAAGA,ECvBI,EDuBMA,IAEtBF,EAAqBF,KAAK,CAAC,KAC3BG,EAAyBH,KAAK,GAIlC,IAAMK,EAAe,CACjBC,WAAYL,EACZM,cAAeL,EACfM,kBAAmBL,EACnBM,aAAc,GACdC,kBAAmB,EACnBC,OAAQ,EACRC,KAAM,EACNC,SAAU,KACVC,MAAO,EACPC,MAAO,EACPC,UAAW,CACPC,IAAK,MACLC,MAAO,QACPC,KAAM,QAEVC,SAAS,EACTC,QAAQ,GAGCC,EAAUC,IAAMC,gBAEd,SAASC,EAAT,GAA8B,IAAbC,EAAY,EAAZA,SAC5B,EAA0BC,mBAAStB,GAAnC,mBAAOuB,EAAP,KAAcC,EAAd,KAEA,OACI,cAACP,EAAQQ,SAAT,CAAkBC,MAAO,CAACH,EAAOC,GAAjC,SAA6CH,I,cExDtC,ICAA,ICAA,ICAA,I,eCsBAM,EAnBa,SAACD,EAAOf,GAChC,IAAKA,EACD,MAAO,IAEX,GAAqB,kBAAVe,GAAgC,KAAVA,EAC7B,OAAOA,EAEX,kBAAgC,CAC5BE,QAAS,CAACC,IAAOlB,EAAUE,MAAO,GAClCiB,WAAY,CAACD,IAAOlB,EAAUE,MAAO,IACrCkB,UAAW,CAACF,IAAOlB,EAAUE,MAAO,KACpCmB,UAAW,CAACH,IAAOlB,EAAUE,MAAO,KACpCoB,UAAW,CAACC,IAAMvB,EAAUG,KAAM,GAClCqB,SAAU,CAACD,IAAMvB,EAAUC,IAAK,GAChCwB,KAAO,CAACA,IAAMzB,EAAUC,IAAK,IAC/Bc,GARF,GAAOW,EAAP,KAAaC,EAAb,KAAoBC,EAApB,KASA,OAAO,cAAC,IAAD,CAAiBF,KAAMA,EAAMC,MAAOA,EAAOC,SAAUA,KCdjD,SAASC,EAAKC,GAIzB,IAAMlB,EAAQmB,qBAAWzB,GAAS,GAC5BS,EAAQe,EAAMf,MAwBdiB,EApBsB,aAApBF,EAAMG,WAGHrB,EAAMpB,kBAAkBsC,EAAMjD,UAAY+B,EAAMhB,KAmBrDsC,EAhBe,SAAAF,GACjB,OAAIA,IAAapB,EAAMP,SAGC,aAApByB,EAAMG,UACCH,EAAMjD,WAAa+B,EAAMlB,kBAEtB,KAAVqB,GAGiBH,EAAMnB,aACP0C,SAAS,SAKfC,CAAaJ,GASzBK,EAAWP,EAAMjD,SAAW,EAC5ByD,EAASD,EAAW,EACpBE,EAAcT,EAAMU,eAAiBV,EAAM/C,YAC3C0D,EAAYF,EAAc,EAE1BG,EAAQ,CACVC,SAAS,GAAD,OAAKN,EAAL,cAAmBE,EAAnB,cAAoCD,EAApC,cAAgDG,IAEvC,kBAAV1B,IACP2B,EAAMf,MAAQ,UAGlB,IAAMiB,EAAehC,EAAMP,OAAS,GAAKW,EAAoBD,EAAOH,EAAMZ,WAEpE6C,EAA+B,aAApBf,EAAMG,WAA4BH,EAAMjD,WAAa+B,EAAMlB,kBAC5E,OACI,qBACIuC,UAAS,oBAAeH,EAAMG,WAArB,OAAiCC,EAAY,aAAe,IAA5D,OAAiEW,EAAW,YAAc,IAA1F,OAA+Fb,EAAY,cAAgB,IACpIc,QAzBY,WACXZ,GAGLJ,EAAMiB,UAAUjB,EAAMjD,SAAUiD,EAAM/C,cAsBlC2D,MAAOA,EAHX,SAKI,qBAAKT,UAAU,aAAf,SAA6BW,MChE1B,SAASI,EAAOlB,GAC3B,IAAMmB,EAAQnB,EAAMmB,MAEdC,EAAS,SAACpE,EAAKD,GACjB,GAAmB,kBAARC,EAIX,OAAOA,EAAIqE,KAAI,SAACpC,EAAOhC,GAAR,OAAwB,cAAC8C,EAAD,CAEnChD,SAAUA,EACVE,YAAaA,EACbgC,MAAOA,EACPqC,QAAStB,EAAMsB,QACfnB,UAAWH,EAAMG,UACjBO,eAAgBV,EAAMU,eACtBO,UAAWjB,EAAMiB,WARkB,eACtBhE,EADsB,YACPF,OAJ5BwE,QAAQC,IAAI,eAcpB,YAAcC,IAAVN,GACAI,QAAQC,IAAI,wBACZD,QAAQC,IAAIxB,EAAMG,YAGE,kBAAbgB,EAAM,GACNA,EAAME,KAAI,SAACrE,EAAKD,GAAN,OAAmBqE,EAAOpE,EAAKD,MAE7CqE,EAAOD,EAAO,G,YCTnBO,EAAyB,SAAClE,EAAYQ,EAAO2D,EAAOC,EAAW7E,EAAUE,GAC3E,IAAM4E,EAAe,CAAC,CAAC9E,EAAUE,IAC7B6E,EAAc,GAClBA,EAAY5E,KAAKH,GACjB+E,EAAY5E,KAAKD,GAEjB,IADA,IAAM8E,EAAoB,CAACC,GAAI,OAAQC,KAAM,KAAMC,MAAO,OAAQC,KAAM,SAASP,GACxEtE,EAAI,EAAGA,EAAI,KAChBwE,EAAcM,EAAeN,EAAaF,IADtBtE,IAMpB,GADAuE,EAAa3E,KAAK,CAAC4E,EAAY,GAAIA,EAAY,KAC3CtE,EAAWsE,EAAY,IAAIA,EAAY,MAAvC,UAAkDC,EAAlD,SAA4E,CAAC,IAAD,EACtDM,EAAkBR,EAAcrE,EAAYQ,GADU,mBAC3ER,EAD2E,KAC/DQ,EAD+D,KAE5E2D,GAAQ,EACR,MAGR,MAAO,CAACnE,EAAYQ,EAAO2D,IAGzBS,EAAiB,SAACN,EAAaF,GACjC,OAAQA,GACJ,IAAK,KACDE,EAAY,KACZ,MACJ,IAAK,QACDA,EAAY,KACZ,MACJ,IAAK,OACDA,EAAY,KACZ,MACJ,IAAK,OACDA,EAAY,KAGpB,OACIA,EAAY,GAAK,GACjBA,EAAY,GAAK,GACjBA,EAAY,IR3DA,GQ4DZA,EAAY,IR3DG,EQ6DR,KAEJA,GAGX,SAASO,EAAkBR,EAAcrE,EAAYQ,GAAQ,IAAD,gBACrC6D,GADqC,IACxD,2BAAiC,CAAC,IAAvBS,EAAsB,UACPC,EAAU/E,EAAY8E,EAAK,GAAIA,EAAK,GAAItE,GADjC,mBAC5BR,EAD4B,KAChBQ,EADgB,MADuB,8BAIxD,MAAO,CAACR,EAAYQ,GAGxB,IAAMuE,EAAY,SAAC/E,EAAYT,EAAUE,EAAae,GAA6B,IAAtBwE,EAAqB,wDAC9E,GAAqB,kBAAVxE,EACP,KAAM,aAEV,IAAMiB,EAAQzB,EAAWT,GAAUE,GACnC,MAAc,aAAVgC,GAAyBuD,EAGf,SAAVvD,GAAqBuD,GAGJ,kBAAVvD,IACPjB,GAASiB,GAEbzB,EAAWT,GAAUE,GAAe,GAC7B,CAACO,EAAYQ,IANTyE,EAAYjF,EAAYT,EAAUE,EAAae,GAH/C0E,EAAWlF,EAAYT,EAAUE,EAAae,IAYvD0E,EAAa,SAAClF,EAAYT,EAAUE,EAAae,GACnD,GAAqB,kBAAVA,EACP,KAAM,aAFmD,MAIvCuE,EAAU/E,EAAYT,EAAUE,EAAae,GAAO,GAJb,mBAI5DR,EAJ4D,KAIhDQ,EAJgD,KAK7D,IAL6D,EAKvD2E,EAAY,CACd,CAAC5F,EAAW,EAAGE,GACf,CAACF,EAAW,EAAGE,GACf,CAACF,EAAUE,EAAc,GACzB,CAACF,EAAUE,EAAc,IAC3B2F,QAAO,SAAAC,GAAQ,OACbA,EAAS,IAAM,GACfA,EAAS,IAAM,GACfA,EAAS,GRzGG,GQ0GZA,EAAS,GRzGM,KQ2F0C,cAgBtCF,GAhBsC,IAgB7D,2BAAkC,CAAC,IAAxBE,EAAuB,UACRN,EAAU/E,EAAYqF,EAAS,GAAIA,EAAS,GAAI7E,GADxC,mBAC7BR,EAD6B,KACjBQ,EADiB,MAhB2B,8BAmB7D,MAAO,CAACR,EAAYQ,IAGlByE,EAAc,SAACjF,EAAYT,EAAUE,EAAae,GACpD,GAAqB,kBAAVA,EACP,KAAM,aAEV,IAAM8E,EAAmBP,EAAU/E,EAAYT,EAAUE,EAAae,GAAO,GAC7ER,EAAasF,EAAiB,GAC9B9E,EAAQ8E,EAAiB,GACzB,IAP8D,gBAQlC,CACxB/F,EAAW,EACXA,EACAA,EAAW,GACb6F,QAAO,SAAAG,GAAa,OAAIA,GAAiB,GAAKA,ER9HhC,MQkH8C,IAQ9D,2BAIuE,CAAC,IAJ7DA,EAI4D,QAC7DC,EAAuBC,EAAezF,EAAYQ,EAAOjB,EAAUE,EAAa8F,GACtFvF,EAAawF,EAAqB,GAClChF,EAAQgF,EAAqB,IAf6B,8BAiB9D,MAAO,CAACxF,EAAYQ,IAGlBiF,EAAiB,SAACzF,EAAYQ,EAAOjB,EAAUE,EAAa8F,GAC9D,GAAqB,kBAAV/E,EACP,KAAM,aAFsE,oBAIjD,CAC3Bf,EAAc,EACdA,EACAA,EAAc,GAChB2F,QAAO,SAAAM,GAAgB,OACrBA,GAAoB,GACpBA,ER/Ie,IQgJdnG,IAAagG,GAAiB9F,IAAgBiG,OAX6B,IAIhF,2BAQI,CAAC,IARMA,EAQP,QACMC,EAAkBZ,EAAU/E,EAAYuF,EAAeG,EAAkBlF,GAC/ER,EAAa2F,EAAgB,GAC7BnF,EAAQmF,EAAgB,IAfoD,8BAiBhF,MAAO,CAAC3F,EAAYQ,IAGToF,EAxJG,SAACzF,EAAcH,EAAYT,EAAUE,EAAae,GAChE,IAAI2D,GAAQ,EACZ,GAAqB,cAAjBhE,EACA,OAAO+E,EAAWlF,EAAYT,EAAUE,EAAae,GAEzD,GAAIL,EAAa0C,SAAS,SAAU,CAChC,IAAMuB,EAAYjE,EAAa0F,MAAM,EAAG1F,EAAa2F,OAAS,GACxDC,EAAsB7B,EAAuBlE,EAAYQ,EAAO2D,EAAOC,EAAW7E,EAAUE,GAClGO,EAAa+F,EAAoB,GACjCvF,EAAQuF,EAAoB,GAC5B5B,EAAQ4B,EAAoB,GAKhC,OAHI5B,IACAnE,EAAWT,GAAUE,GAAeU,GAEjC,CAACH,EAAYQ,I,QCjBlBwF,EAAoB,CACtBrE,QAAS,EACTE,WAAY,EACZC,UAAW,EACXC,UAAW,EACXC,UAAW,EAEXG,KAAM,GAGG8D,EAAe,kBAAMC,EAAOF,IAElC,SAASE,EAAOC,GAAwB,IAAhBC,EAAe,wDAC1C,GAAmC,IAA/BC,OAAOC,KAAKH,GAAQL,OACpB,OAAO,KAEX,IAAMS,EAAQC,EAAeL,GACvBM,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMT,QAC/Ce,EAASN,EAAME,GACrB,OAAKL,GAA6B,kBAAXS,EAGhBA,EAFIX,EAAOW,GAKtB,SAASL,EAAeL,GACpB,GAAIW,MAAMC,QAAQZ,GACd,OAAOA,EAEX,IAAMI,EAAQ,GACd,IAAK,IAAMS,KAAQb,EACfc,EAAaV,EAAOS,EAAMb,EAAOa,IAErC,OAAOT,EAGX,SAASU,EAAaV,EAAOS,EAAME,GAC/B,IAAK,IAAIpH,EAAI,EAAGA,EAAIoH,EAAOpH,IACvByG,EAAM7G,KAAKsH,GAEf,OAAOT,ECtCX,IAQeY,EARc,SAACC,EAAuBC,GACjD,MAAM,GAAN,mBACOD,EAAsBvB,MAAM,EAAGwB,IADtC,YAEOD,EAAsBvB,MAAMwB,EAA4B,IAF/D,CAGI,CAACpB,QC2BHqB,EAAkB,SAAAC,GACpB,GAAIA,EAAcjH,KAAO,KAAO,EAC5B,OAAO,KAGX,IADA,IAAIkH,EAAa,GACRjI,EAAW,EAAGA,EXtCP,EWsCwBA,IACpCiI,EAAaC,EAAqBD,EAAYjI,EAAUgI,EAAcvH,YAE1E,OAAOkG,EAAOsB,GAAY,IAGxBC,EAAuB,SAACD,EAAYjI,EAAUS,GAEhD,IADA,IAAMR,EAAMQ,EAAWT,GACdE,EAAc,EAAGA,EX7CP,EW6C8BA,IAAe,CAElD,KADID,EAAIC,IACF+H,EAAW9H,KAAK,CAACH,EAAUE,IAE/C,OAAO+H,GAGLE,EAAY,SAACC,EAAWpI,EAAUqI,EAAaC,GACjD,IAAK,IAAIpI,EAAc,EAAGA,EXrDP,EWqD8BA,IAAe,CAC5D,IAAMgC,EAAQkG,EAAUpI,GAAUE,GAClCmI,EAAcE,EAAWrG,EAAOkG,EAAWpI,EAAUE,EAAamI,EAAaC,GAEnF,OAAOD,GAGLE,EAAa,SAACrG,EAAOkG,EAAWpI,EAAUE,EAAamI,EAAaC,GACtE,MAAqB,kBAAVpG,GAAsBA,EAAQ,GACrCkG,EAAUpI,GAAUE,GAAe,EAC5BmI,EAAcG,EAAkBxI,EAAUE,EAAakI,EAAWC,KAEzEC,GAAcA,EAAW,KAAOtI,GAAYsI,EAAW,KAAOpI,IAC9DkI,EAAUpI,GAAUE,GAAe,GAEhCmI,IAGLG,EAAoB,SAACxI,EAAUE,EAAakI,EAAWC,GACzD,IADyE,EAOnEzC,EANoB,CACtB,CAAC5F,EAAUE,EAAc,GACzB,CAACF,EAAUE,EAAc,GACzB,CAACF,EAAW,EAAGE,GACf,CAACF,EAAW,EAAGE,IAEiB2F,QAAO,SAAAC,GAAQ,OAC/CA,EAAS,IAAM,GACfA,EAAS,IAAM,GACfA,EAAS,GXlFG,GWmFZA,EAAS,GXlFM,KWuEsD,cAalDF,GAbkD,IAazE,2BAAkC,CAAC,IAAxBE,EAAuB,QAC9BuC,EAAcI,EAAiBL,EAAWtC,EAAUuC,IAdiB,8BAgBzE,OAAOA,GAGLI,EAAmB,SAACL,EAAWtC,EAAUuC,GAC3C,IAAMK,EAAgBN,EAAUtC,EAAS,IAAIA,EAAS,IACtD,MAAsB,KAAlB4C,GACAN,EAAUtC,EAAS,IAAIA,EAAS,IAAM,EAC/B,IAEkB,kBAAlB4C,IACPA,GAAiB,EAAIL,IAAgBD,EAAUtC,EAAS,IAAIA,EAAS,KAAO,GAEzEuC,IAGIM,EApGK,SAAA3G,GAChBA,GAAS,SAAAgG,GACL,GAAIA,EAAcxG,OACd,OAAOwG,EAQX,IANA,IAAMM,EAAaP,EAAgBC,GAC/BK,EAAc,EAEZD,EADgBJ,EAAcvH,WACJ6D,KAAI,SAAArE,GAChC,OAAOA,EAAIqE,KAAI,SAAApC,GAAK,MAAqB,kBAAVA,EAAqBA,EAAQ,EAAIA,QAE3DlC,EAAW,EAAGA,EXdX,EWc4BA,IACpCqI,EAAcF,EAAUC,EAAWpI,EAAUqI,EAAaC,GAE9D,IAAMM,EAAaZ,EAAclH,OAASuH,EACpCQ,EAAWD,EXfA,IW0BjB,OAVIC,GACAC,cAAcd,EAAchH,UAEjB,2BACRgH,GADQ,IAEXlH,OAAQ8H,EACRnI,WAAY2H,EACZrH,KAAMiH,EAAcjH,KAAO,EAC3B8H,SAAUA,QCpBN,SAASE,EAAM9F,GAC3B,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KAAcC,EAAd,KA0CA,OACI,cAACmC,EAAD,CACIC,MAAOrC,EAAMtB,WACb2C,UAAU,QACVO,eAAgB,EAChBO,UA7CU,SAAClE,EAAUE,GACzB,IAAM8I,EAAqBjH,EAAMtB,WAC3BoH,EAAwB9F,EAAMrB,cAC9BoH,EAA4B/F,EAAMlB,kBAClCoI,EAAgBlH,EAAMd,MAC5B,EAAoCoF,EAAUtE,EAAMnB,aAAcoI,EAAoBhJ,EAAUE,EAAa+I,EAAelH,EAAMZ,WAAlI,mBAAO+H,EAAP,KAAuBC,EAAvB,KACMC,EAAoBxB,EAAqBC,EAAuBC,GAChEnH,EAAoBoB,EAAMpB,kBAC1B0I,EAAoBtH,EAAMZ,UAC5B2G,EAA4B,IAC5BnH,EAAkBmH,GAA6B/F,EAAMhB,KAAO,EAAI+G,GAEpE,IAAMwB,EAAgBvH,EAAMb,MACtBqI,EAAmBxH,EAAMf,SACzBwI,EAAazH,EAAMyH,WACrBC,EAAYH,EAAeI,EAAgBL,EAAmBM,EAAeJ,EAC7EJ,GAAapH,EAAMZ,UAAUyI,MAAQJ,EAAWjD,OAAS+C,EAAgB,IAEzEI,EAAgBF,EADhBC,GAAa,GAEbX,cAAcS,GACdI,EAAeE,aAAY,WACvBlB,EAAY3G,KACb0H,EAAcI,WAErB9H,EAAS,2BACFD,GADC,IAEJtB,WAAYyI,EACZxI,cAAe0I,EACfnI,MAAOkI,EACPtI,kBAAmB,EACnBD,aAAcwI,EAAkB,GAAG,GACnCzI,kBAAmBA,EACnBQ,UAAWuI,EACXxI,MAAOuI,EACPzI,SAAU2I,QCtCP,SAASI,EAAS9G,GAE7B,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KAAcC,EAAd,KAYA,OACI,cAACmC,EAAD,CACIC,MAAOrC,EAAMrB,cACb0C,UAAU,WACVO,eAAgBqG,GAChB9F,UAfU,SAAClE,GACfgC,EAAS,2BACFD,GADC,IAEJlB,kBAAmBb,EACnBY,aAAcmB,EAAMrB,cAAcV,GAAU,SCVzC,SAASiK,EAAMhH,GAC1B,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KACMZ,GADN,KACkBY,EAAMZ,WAClB0C,EAAQ,CACVC,SAAS,OAAD,OAASkG,GAAT,kBAA8BA,IACtCE,gBAAiB/I,EAAUE,OAG/B,OACI,qBAAK+B,UAAU,cAAcS,MAAOA,EAApC,SACK9B,EAAMR,SAAN,gBAA0BQ,EAAMb,MAAhC,cAA2CC,EAAUgJ,QCVnD,SAASC,EAAMnH,GAC1B,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KACMZ,GADN,KACkBY,EAAMZ,WAClB0C,EAAQ,CACVC,SAAS,OAAD,OAASkG,GAAT,kBAA8BA,IACtCE,gBAAiB/I,EAAUE,OAG/B,OACI,qBAAK+B,UAAU,cAAcS,MAAOA,EAApC,SACK9B,EAAMR,SAAN,iBAA2BQ,EAAMd,MAAjC,cAA4CE,EAAUyI,QCVpD,SAASS,EAAOpH,GAC3B,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KACMZ,GADN,KACkBY,EAAMZ,WAClB0C,EAAQ,CACVC,SAAS,OAAD,OAASkG,GAAT,kBAA8BA,IACtCE,gBAAiB/I,EAAUmJ,QAG/B,OACI,qBAAKlH,UAAU,eAAeS,MAAOA,EAArC,SACK9B,EAAMR,SAAN,kBAA4BQ,EAAMjB,UCV/C,IAqBMT,EAAuB,WAEzB,IADA,IAAMiH,EAAS,GACNtH,EAAW,EAAGA,EjB3BP,EiB2BwBA,IACpCsH,EAAOnH,KAAK,CAACuG,MAEjB,OAAOY,GAGIiD,EA7BG,SAACxI,EAAOC,GACtB,IAAMoH,EAAoB/I,IAC1BmK,MAAM,yDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,IAAMxJ,EAAYwJ,EAAK,GACvBnG,QAAQC,IAAI,CAAC1C,UACbC,EAAS,2BACFD,GADC,IAEJyH,WAAYmB,EACZxJ,UAAWA,EACXT,cAAe0I,EACfxI,aAAcwI,EAAkB,GAAG,GACnCpI,SAAU6I,aAAY,WAClBlB,EAAY3G,KACbb,EAAU2I,UACbvI,SAAS,SCfN,YAAS0B,GACpB,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KAAcC,EAAd,KAEMb,EAAYY,EAAMZ,UAClB0C,EAAQ,CACVC,SAAS,OAAD,OAASkG,GAAT,kBAA8BA,IACtCE,gBAAiB/I,EAAUG,MAGzBY,EAAQH,EAAMR,QAAWQ,EAAMP,OAAS,SAAW,QAAW,QAapE,OACI,qBAAK4B,UAAU,wBAAwBS,MAAOA,EAAOI,QAZrC,WACXlC,EAAMR,QAIXS,EAAS,2BACFD,GADC,IAEJP,QAASO,EAAMP,UALf+I,EAAUxI,EAAOC,IAUrB,SACKE,KCpBE,SAAS0I,GAAS3H,GAE7B,IAAMY,EAAQ,CACVgH,oBAAoB,UAAD,OAAYb,GAAZ,WAGvB,OACI,sBAAK5G,UAAU,YAAYS,MAAOA,EAAlC,UACI,cAACkF,EAAD,IACA,cAACgB,EAAD,IACA,cAACE,EAAD,IACA,cAACG,EAAD,IACA,cAACC,EAAD,IACA,cAACS,GAAD,O,qBCjBG,SAASC,GAAS9H,GAE7B,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,KACMiJ,GADN,KACgBC,gBAuBhB,OACI,gCACI,wDAA2BlJ,EAAMd,MAAjC,cACA,uBAAMiK,SAxBU,SAAAC,GACpB3G,QAAQC,IAAI,yBACZ0G,EAAMC,iBAEN,IAGMC,EAAO,CAAC,KAFGC,SAASC,eAAe,aACnBrJ,MACM,MAASH,EAAMd,MAAO,GAAMuK,gBAClDC,EAAe,CACjBC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,oBAEdC,KAAMC,KAAKC,UAAUT,IAEzB7G,QAAQC,IAAI,CAAC4G,SACbb,MAbY,+FAaDiB,GACXT,EAAQ7K,KAAK,iBAMT,UACI,uBAAO4L,KAAK,OAAOC,GAAG,YAAYC,YAAY,cAC9C,uBAAOD,GAAG,gBAAgBD,KAAK,SAAS7J,MAAM,uBCpC/C,SAASgK,KACpB,OACI,qBAAK9I,UAAU,SAAf,oBCSO,SAAS+I,GAAKlJ,GACzB,MAA0BC,qBAAWzB,GAArC,mBAAOM,EAAP,UACA,OACI,sBAAKqB,UAAU,OAAf,UAEKrB,EAAM8G,SAAW,cAACkC,GAAD,IAAe,cAACH,GAAD,IACjC,cAACsB,GAAD,O,aCfG,SAASE,GAAQnJ,GAC5B,OACI,qBAAKG,UAAU,WAAf,SACI,cAAC,KAAD,CACIiJ,GAAG,wBACHC,OAAK,EAFT,wBCHG,SAASF,GAAQnJ,GAC5B,OACI,qBAAKG,UAAU,WAAf,SACI,cAAC,KAAD,CACIiJ,GAAG,+BACHC,OAAK,EAFT,2BCFG,SAASC,GAAKtJ,GACzB,OACI,sBAAKG,UAAU,OAAf,UACI,cAACgJ,GAAD,IACA,cAAC,GAAD,OCJG,SAASI,GAAWvJ,GAC/B,MAA0BnB,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAIAyK,qBAAU,WACNjC,MAHQ,gGAIPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAS3I,EAAS2I,QACzB,IAMH,OACI,gCACK5I,EAAMuC,KAAI,SAAAoI,GAAC,OAAI,gCAAMA,EAAEvC,KAAR,KAAgBuC,EAAEzL,YAClC,wBAAQgD,QAPI,aAOZ,yBCfZ,SAAS0I,GAAU1J,GAClB,OACC,cAACrB,EAAD,UACC,cAACuK,GAAD,MAiBYS,OAZf,SAAa3J,GACZ,OACC,cAAC,KAAD,UACC,gCACC,cAAC,KAAD,CAAOqJ,OAAK,EAACO,KAAK,mBAAmBC,UAAWP,KAChD,cAAC,KAAD,CAAOD,OAAK,EAACO,KAAK,wBAAwBC,UAAWH,KACrD,cAAC,KAAD,CAAOL,OAAK,EAACO,KAAK,+BAA+BC,UAAWN,WCRjDO,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFnC,SAASC,eAAe,SAM1BwB,O","file":"static/js/main.00d3018a.chunk.js","sourcesContent":["import { faArrowUp } from '@fortawesome/free-solid-svg-icons'\nimport React, { useState } from 'react'\n\nimport { rows, columns } from '../globalProps'\n\n\nconst initialRow = rowIndex => {\n    const row = []\n    for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        row.push('')\n    }\n    return row\n}\n\nconst initialBoardCells = []\nfor (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n    initialBoardCells.push(initialRow(rowIndex))\n}\n\n\n\nconst initialForecastCells = []\nconst initialForecastCooldowns = []\nfor (let i = 0; i < rows; i++) {\n    // initialForecastCells.push([generateItem()])\n    initialForecastCells.push([''])\n    initialForecastCooldowns.push(0)\n}\n\n\nconst initialState = {\n    boardCells: initialBoardCells,\n    forecastCells: initialForecastCells,\n    forecastCooldowns: initialForecastCooldowns,\n    selectedItem: '',\n    selectedItemIndex: 0,\n    damage: 0,\n    step: 0,\n    interval: null,\n    score: 0,\n    level: 0,\n    levelData: {\n        red: 'red',\n        green: 'green',\n        blue: 'blue',\n    },\n    started: false,\n    paused: false,\n}\n\nexport const Context = React.createContext()\n\nexport default function Store({ children }) {\n    const [state, setState] = useState(initialState)\n\n    return (\n        <Context.Provider value={[state, setState]}>{children}</Context.Provider>\n    )\n\n    \n}","export const rows = 8\nexport const columns = 8\nexport const stepSize = 1500\nexport const maxDamage = 999","export default __webpack_public_path__ + \"static/media/downArrow.8bccc270.png\";","export default __webpack_public_path__ + \"static/media/crossBlue.57dc105e.png\";","export default __webpack_public_path__ + \"static/media/crossRed.3b422763.png\";","export default __webpack_public_path__ + \"static/media/bomb.357a087a.png\";","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowUp as arrow, faPlus as plus, faBomb as bomb } from '@fortawesome/free-solid-svg-icons'\n\nconst getCellDisplayValue = (value, levelData) => {\n    if (!levelData) {\n        return '?'\n    }\n    if (typeof value === 'number' || value === '') {\n        return value\n    }\n    const [icon, color, rotation] = {\n        upArrow: [arrow, levelData.green, 0],\n        rightArrow: [arrow, levelData.green, 90],\n        downArrow: [arrow, levelData.green, 180],\n        leftArrow: [arrow, levelData.green, 270],\n        crossBlue: [plus, levelData.blue, 0],\n        crossRed: [plus, levelData.red, 0],\n        bomb:  [bomb, levelData.red, 0],\n    }[value]\n    return <FontAwesomeIcon icon={icon} color={color} rotation={rotation} />\n}\n\nexport default getCellDisplayValue","import imagesObject from '../imagesObject'\nimport { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport getCellDisplayValue from '../functions/getCellDisplayValue'\n\nexport default function Cell(props) {\n    // console.log('Cell')\n\n    // const [state, setState] = useContext(Context)\n    const state = useContext(Context)[0]\n    const value = props.value\n\n\n    const getGreyedOut = () => {\n        if (props.className !== 'forecast') {\n            return false\n        }\n        return state.forecastCooldowns[props.rowIndex] > state.step\n    }\n\n    const getCLickable = greyedOut => {\n        if (greyedOut || state.paused) {\n            return false\n        }\n        if (props.className === 'forecast') {\n            return props.rowIndex !== state.selectedItemIndex\n        }\n        if (value === '') {\n            return true\n        }\n        const selectedItem = state.selectedItem\n        return selectedItem.includes('Blue')\n    }\n\n    const greyedOut = getGreyedOut()\n\n    const clickable = getCLickable(greyedOut)\n\n    const handleClick = () => {\n        if (!clickable) {\n            return\n        }\n        props.cellClick(props.rowIndex, props.columnIndex)\n    }\n\n    const rowStart = props.rowIndex + 1\n    const rowEnd = rowStart + 1\n    const columnStart = props.startingColumn + props.columnIndex\n    const columnEnd = columnStart + 1\n\n    const style = {\n        gridArea: `${rowStart} / ${columnStart} / ${rowEnd} / ${columnEnd}`\n    }\n    if (typeof value === 'number') {\n        style.color = 'purple'\n    }\n\n    const displayValue = state.paused ? '' : getCellDisplayValue(value, state.levelData)\n\n    const selected = props.className === 'forecast' && props.rowIndex === state.selectedItemIndex\n    return (\n        <div\n            className={`cell cell-${props.className}${clickable ? ' clickable' : ''}${selected ? ' selected' : ''}${greyedOut ? ' greyed-out' : ''}`}\n            onClick={handleClick}\n            style={style}\n        >\n            <div className=\"cell-value\">{displayValue}</div>\n        </div>\n    )\n}","import Cell from './Cell'\n\nexport default function Matrix(props) {\n    const cells = props.cells\n\n    const rowMap = (row, rowIndex) => {\n        if (typeof row !== 'object') {\n            console.log('non-object')\n            return\n        }\n        return row.map((value, columnIndex) => <Cell\n            key={`cell-${columnIndex},${rowIndex}`}\n            rowIndex={rowIndex}\n            columnIndex={columnIndex}\n            value={value}\n            setCell={props.setCell}\n            className={props.className}\n            startingColumn={props.startingColumn}\n            cellClick={props.cellClick}\n        />)\n    }\n    if (cells === undefined) {\n        console.log('cells undefined')\n        console.log(props.className)\n        return\n    }\n    if (typeof cells[0] === 'object') {\n        return cells.map((row, rowIndex) => rowMap(row, rowIndex))\n    }\n    return rowMap(cells, 0)\n}","import { rows, columns } from '../globalProps'\n\nconst placeItem = (selectedItem, boardCells, rowIndex, columnIndex, score) => {\n    let place = true;\n    if (selectedItem === 'crossBlue') {\n        return clearCross(boardCells, rowIndex, columnIndex, score)\n    }\n    if (selectedItem.includes('Arrow')) {\n        const direction = selectedItem.slice(0, selectedItem.length - 5)\n        const oppositeArrowResult = searchForOppositeArrow(boardCells, score, place, direction, rowIndex, columnIndex)\n        boardCells = oppositeArrowResult[0]\n        score = oppositeArrowResult[1]\n        place = oppositeArrowResult[2]\n    }\n    if (place) {\n        boardCells[rowIndex][columnIndex] = selectedItem\n    }\n    return [boardCells, score]\n}\n\nconst searchForOppositeArrow = (boardCells, score, place, direction, rowIndex, columnIndex) => {\n    const visibleCells = [[rowIndex, columnIndex]]\n    let currentCell = []\n    currentCell.push(rowIndex)\n    currentCell.push(columnIndex)\n    const oppositeDirection = {up: 'down', down: 'up', right: 'left', left: 'right'}[direction]\n    for (let i = 0; i < 12; i++) {\n        currentCell = nextCellInLine(currentCell, direction)\n        if (!currentCell) {\n            break\n        }\n        visibleCells.push([currentCell[0], currentCell[1]])\n        if (boardCells[currentCell[0]][currentCell[1]] === `${oppositeDirection}Arrow`) {\n            [boardCells, score] = clearVisibleCells(visibleCells, boardCells, score)\n            place = false\n            break\n        }\n    }\n    return [boardCells, score, place]\n}\n\nconst nextCellInLine = (currentCell, direction) => {\n    switch (direction) {\n        case 'up':\n            currentCell[0]--\n            break\n        case 'right':\n            currentCell[1]++\n            break\n        case 'down':\n            currentCell[0]++\n            break\n        case 'left':\n            currentCell[1]--\n            break\n    }\n    if (\n        currentCell[0] < 0 ||\n        currentCell[1] < 0 ||\n        currentCell[0] >= rows ||\n        currentCell[1] >= columns\n    ) {\n        return null\n    }\n    return currentCell\n}\n\nfunction clearVisibleCells(visibleCells, boardCells, score) {\n    for (const cell of visibleCells) {\n        [boardCells, score] = clearCell(boardCells, cell[0], cell[1], score)\n    }\n    return [boardCells, score]\n}\n\nconst clearCell = (boardCells, rowIndex, columnIndex, score, forceClear=false) => {\n    if (typeof score !== 'number') {\n        throw 'No number!'\n    }\n    const value = boardCells[rowIndex][columnIndex]\n    if (value === 'crossRed' && !forceClear) {\n        return clearCross(boardCells, rowIndex, columnIndex, score)\n    }\n    if (value === 'bomb' && !forceClear) {\n        return clearSquare(boardCells, rowIndex, columnIndex, score)\n    }\n    if (typeof value === 'number') {\n        score += value\n    }\n    boardCells[rowIndex][columnIndex] = ''\n    return [boardCells, score]\n}\n\nconst clearCross = (boardCells, rowIndex, columnIndex, score) => {\n    if (typeof score !== 'number') {\n        throw 'No number!'\n    }\n    [boardCells, score] = clearCell(boardCells, rowIndex, columnIndex, score, true)\n    const neighbors = [\n        [rowIndex + 1, columnIndex],\n        [rowIndex - 1, columnIndex],\n        [rowIndex, columnIndex + 1],\n        [rowIndex, columnIndex - 1],\n    ].filter(neighbor => (\n        neighbor[0] >= 0 &&\n        neighbor[1] >= 0 &&\n        neighbor[0] < rows &&\n        neighbor[1] < columns\n    ))\n    for (const neighbor of neighbors) {\n        [boardCells, score] = clearCell(boardCells, neighbor[0], neighbor[1], score)\n    }\n    return [boardCells, score]\n}\n\nconst clearSquare = (boardCells, rowIndex, columnIndex, score) => {\n    if (typeof score !== 'number') {\n        throw 'No number!'\n    }\n    const clearCellResult1 = clearCell(boardCells, rowIndex, columnIndex, score, true)\n    boardCells = clearCellResult1[0]\n    score = clearCellResult1[1]\n    const neighbors = []\n    for (const otherRowIndex of [\n        rowIndex - 1,\n        rowIndex,\n        rowIndex + 1\n    ].filter(otherRowIndex => otherRowIndex >= 0 && otherRowIndex < rows)) {\n        const clearSquareRowResult = clearSquareRow(boardCells, score, rowIndex, columnIndex, otherRowIndex)\n        boardCells = clearSquareRowResult[0]\n        score = clearSquareRowResult[1]\n    }\n    return [boardCells, score]\n}\n\nconst clearSquareRow = (boardCells, score, rowIndex, columnIndex, otherRowIndex) => {\n    if (typeof score !== 'number') {\n        throw 'No number!'\n    }\n    for (const otherColumnIndex of [\n        columnIndex - 1,\n        columnIndex,\n        columnIndex + 1\n    ].filter(otherColumnIndex => (\n        otherColumnIndex >= 0 &&\n        otherColumnIndex < columns &&\n        (rowIndex !== otherRowIndex || columnIndex !== otherColumnIndex)\n    ))) {\n        const clearCellResult = clearCell(boardCells, otherRowIndex, otherColumnIndex, score)\n        boardCells = clearCellResult[0]\n        score = clearCellResult[1]\n    }\n    return [boardCells, score]\n}\n\nexport default placeItem","const probabilityObject = {\n    upArrow: 1,\n    rightArrow: 1,\n    downArrow: 1,\n    leftArrow: 1,\n    crossBlue: 1,\n    // crossRed: 1,\n    bomb: 1,\n}\n\nexport const generateItem = () => choice(probabilityObject)\n\nexport function choice(object, shallow=false) {\n    if (Object.keys(object).length === 0) {\n        return null\n    }\n    const array = getChoiceArray(object)\n    const randomIndex = Math.floor(Math.random() * array.length)\n    const result = array[randomIndex]\n    if (!shallow && typeof result === 'object') {\n        return choice(result)\n    }\n    return result\n}\n\nfunction getChoiceArray(object) {\n    if (Array.isArray(object)) {\n        return object\n    }\n    const array = []\n    for (const item in object) {\n        pushMultiple(array, item, object[item])\n    }\n    return array\n}\n\nfunction pushMultiple(array, item, times) {\n    for (let i = 0; i < times; i++) {\n        array.push(item)\n    }\n    return array\n} \n\n","import { generateItem } from '../random'\n\nconst getNextForecastCells = (previousForecastCells, previousSelectedItemIndex) => {\n    return [\n        ...previousForecastCells.slice(0, previousSelectedItemIndex),\n        ...previousForecastCells.slice(previousSelectedItemIndex + 1),\n        [generateItem()],\n    ]\n}\n\nexport default getNextForecastCells","import { rows, columns, maxDamage } from \"../globalProps\"\nimport { choice } from '../random'\n\nconst updateBoard = setState => {\n    setState(previousState => {\n        if (previousState.paused) {\n            return previousState\n        }\n        const chosenCell = chooseEmptyCell(previousState)\n        let addedDamage = 0\n        const previousCells = previousState.boardCells\n        const nextCells = previousCells.map(row => {\n            return row.map(value => typeof value === 'number' ? value + 1 : value)\n        })\n        for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n            addedDamage = updateRow(nextCells, rowIndex, addedDamage, chosenCell)\n        }\n        const nextDamage = previousState.damage + addedDamage\n        const gameOver = nextDamage > maxDamage\n        if (gameOver) {\n            clearInterval(previousState.interval)\n        }\n        const nextState = {\n            ...previousState,\n            damage: nextDamage,\n            boardCells: nextCells,\n            step: previousState.step + 1,\n            gameOver: gameOver\n        }\n        return nextState\n    })\n}\n\nconst chooseEmptyCell = previousState => {\n    if (previousState.step % 10 !== 0) {\n        return null\n    }\n    let emptyCells = []\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n        emptyCells = addEmptyCellsFromRow(emptyCells, rowIndex, previousState.boardCells)\n    }\n    return choice(emptyCells, true)\n}\n\nconst addEmptyCellsFromRow = (emptyCells, rowIndex, boardCells) => {\n    const row = boardCells[rowIndex]\n    for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        const value = row[columnIndex]\n        value === '' && emptyCells.push([rowIndex, columnIndex])\n    }\n    return emptyCells\n}\n\nconst updateRow = (nextCells, rowIndex, addedDamage, chosenCell) => {\n    for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\n        const value = nextCells[rowIndex][columnIndex]\n        addedDamage = updateCell(value, nextCells, rowIndex, columnIndex, addedDamage, chosenCell)\n    }\n    return addedDamage\n}\n\nconst updateCell = (value, nextCells, rowIndex, columnIndex, addedDamage, chosenCell) => {\n    if (typeof value === 'number' && value > 9) {\n        nextCells[rowIndex][columnIndex] = 9\n        return addedDamage + spreadToNeighbors(rowIndex, columnIndex, nextCells, addedDamage)\n    }\n    if (chosenCell && chosenCell[0] === rowIndex && chosenCell[1] === columnIndex) {\n        nextCells[rowIndex][columnIndex] = 1\n    }\n    return addedDamage\n}\n\nconst spreadToNeighbors = (rowIndex, columnIndex, nextCells, addedDamage) => {\n    const possibleNeighbors = [\n        [rowIndex, columnIndex + 1],\n        [rowIndex, columnIndex - 1],\n        [rowIndex + 1, columnIndex],\n        [rowIndex - 1, columnIndex],\n    ]\n    const neighbors = possibleNeighbors.filter(neighbor => (\n        neighbor[0] >= 0 &&\n        neighbor[1] >= 0 &&\n        neighbor[0] < rows &&\n        neighbor[1] < columns\n    ))\n    for (const neighbor of neighbors) {\n        addedDamage = spreadToNeighbor(nextCells, neighbor, addedDamage)\n    }\n    return addedDamage\n}\n\nconst spreadToNeighbor = (nextCells, neighbor, addedDamage) => {\n    const neighborValue = nextCells[neighbor[0]][neighbor[1]]\n    if (neighborValue === '') {\n        nextCells[neighbor[0]][neighbor[1]] = 1\n        return 0\n    }\n    if (typeof neighborValue === 'number') {\n        neighborValue >= 9 ? addedDamage++ : nextCells[neighbor[0]][neighbor[1]] += 1\n    }\n    return addedDamage\n}\n\nexport default updateBoard","import { useContext } from 'react'\nimport { Context } from './Store'\nimport Matrix from '../components/Matrix'\nimport placeItem from '../functions/placeItem'\nimport getNextForecastCells from '../functions/getNextForecastCells'\nimport updateBoard from '../functions/updateBoard'\n \n export default function Board(props) {\n    const [state, setState] = useContext(Context)\n\n    const cellClick = (rowIndex, columnIndex) => {\n        const previousBoardCells = state.boardCells\n        const previousForecastCells = state.forecastCells\n        const previousSelectedItemIndex = state.selectedItemIndex\n        const previousScore = state.score\n        const [nextBoardCells, nextScore] = placeItem(state.selectedItem, previousBoardCells, rowIndex, columnIndex, previousScore, state.levelData)\n        const nextForecastCells = getNextForecastCells(previousForecastCells, previousSelectedItemIndex)\n        const forecastCooldowns = state.forecastCooldowns\n        const previousLevelData = state.levelData\n        if (previousSelectedItemIndex > 0) {\n            forecastCooldowns[previousSelectedItemIndex] = state.step + 5 * previousSelectedItemIndex\n        }\n        const previousLevel = state.level\n        const previousInterval = state.interval\n        const levelsData = state.levelsData\n        let nextLevel = previousLevel, nextLevelData = previousLevelData, nextInterval = previousInterval\n        if (nextScore >= state.levelData.goal && levelsData.length > previousLevel + 1) {\n            nextLevel += 1\n            nextLevelData = levelsData[nextLevel]\n            clearInterval(previousInterval)\n            nextInterval = setInterval(() => {\n                updateBoard(setState)\n            }, nextLevelData.stepSize)\n        }\n        setState({\n            ...state,\n            boardCells: nextBoardCells,\n            forecastCells: nextForecastCells,\n            score: nextScore,\n            selectedItemIndex: 0,\n            selectedItem: nextForecastCells[0][0],\n            forecastCooldowns: forecastCooldowns,\n            levelData: nextLevelData,\n            level: nextLevel,\n            interval: nextInterval,\n        })\n    }\n\n    \n\n    return (\n        <Matrix\n            cells={state.boardCells}\n            className='board'\n            startingColumn={1}\n            cellClick={cellClick}\n        />\n    )\n}","import Matrix from '../components/Matrix'\nimport { useContext } from 'react'\nimport { Context } from './Store'\nimport { columns } from '../globalProps'\n\n\nexport default function Forecast(props) {\n   \n    const [state, setState] = useContext(Context)\n\n    const cellClick = (rowIndex) => {\n        setState({\n            ...state,\n            selectedItemIndex: rowIndex,\n            selectedItem: state.forecastCells[rowIndex][0],\n        })\n    }\n\n\n\n    return (\n        <Matrix\n            cells={state.forecastCells}\n            className='forecast'\n            startingColumn={columns + 2}\n            cellClick={cellClick}\n        />\n    )\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\n\nexport default function Level(props) {\n    const [state, useState] = useContext(Context)\n    const levelData = state.levelData\n    const style = {\n        gridArea: `1 / ${columns + 4} / 3 / ${columns + 9}`,\n        backgroundColor: levelData.green,\n    }\n\n    return (\n        <div className=\"level panel\" style={style}>\n            {state.started && `Level ${state.level} - ${levelData.name}`}\n        </div>\n    )\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\n\nexport default function Score(props) {\n    const [state, setState] = useContext(Context)\n    const levelData = state.levelData\n    const style = {\n        gridArea: `3 / ${columns + 4} / 5 / ${columns + 9}`,\n        backgroundColor: levelData.green,\n    }\n\n    return (\n        <div className=\"score panel\" style={style}>\n            {state.started && `Score: ${state.score} / ${levelData.goal}`}\n        </div>\n    )\n\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\n\nexport default function Damage(props) {\n    const [state, setState] = useContext(Context)\n    const levelData = state.levelData\n    const style = {\n        gridArea: `5 / ${columns + 4} / 7 / ${columns + 9}`,\n        backgroundColor: levelData.purple,\n    }\n\n    return (\n        <div className=\"damage panel\" style={style}>\n            {state.started && `Damage: ${state.damage}`}\n        </div>\n    )\n} ","import { generateItem, choice } from '../random'\nimport updateBoard from './updateBoard'\nimport { rows } from '../globalProps'\n\nconst startGame = (state, setState) => {\n    const nextForecastCells = initialForecastCells()\n    fetch('https://jbmbroomfield.github.io/Data/levels_data.json')\n    .then(response => response.json())\n    .then(json => {\n        const levelData = json[0]\n        console.log({state})\n        setState({\n            ...state,\n            levelsData: json,\n            levelData: levelData,\n            forecastCells: nextForecastCells,\n            selectedItem: nextForecastCells[0][0],\n            interval: setInterval(() => {\n                updateBoard(setState)\n            }, levelData.stepSize),\n            started: true,\n        })\n    })\n}\n\nconst initialForecastCells = () => {\n    const result = []\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\n        result.push([generateItem()])\n    }\n    return result\n}\n\nexport default startGame","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { columns } from '../globalProps'\nimport startGame from '../functions/startGame'\n\nexport default function(props) {\n    const [state, setState] = useContext(Context)\n\n    const levelData = state.levelData\n    const style = {\n        gridArea: `7 / ${columns + 4} / 9 / ${columns + 9}`,\n        backgroundColor: levelData.blue,\n    }\n\n    const value = state.started ? (state.paused ? 'Resume' : 'Pause') : 'Start'\n\n    const handleClick = () => {\n        if (!state.started) {\n            startGame(state, setState)\n            return\n        }\n        setState({\n            ...state,\n            paused: !state.paused\n        })\n    }\n\n    return (\n        <div className=\"pause panel clickable\" style={style} onClick={handleClick}>\n            {value}\n        </div>\n    )\n}","import Board from './Board'\nimport Forecast from './Forecast'\nimport Level from '../components/Level'\nimport Score from '../components/Score'\nimport Damage from '../components/Damage'\nimport Pause from '../components/Pause'\nimport { columns } from '../globalProps'\n\n\nexport default function GameGrid(props) {\n\n    const style = {\n        gridTemplateColumns: `repeat(${columns + 8}, 1fr)`,\n    }\n\n    return (\n        <div className='game-grid' style={style}>\n            <Board />\n            <Forecast />\n            <Level />\n            <Score />\n            <Damage />\n            <Pause />\n        </div>\n    )\n}","import { useContext } from 'react'\nimport { Context } from '../containers/Store'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useHistory } from 'react-router-dom'\n\nexport default function GameOver(props) {\n\n    const [state, setState] = useContext(Context)\n    const history = useHistory()\n\n    const submitHighScore = event => {\n        console.log('submitting high score')\n        event.preventDefault()\n        // const url = `http://localhost:3000/high_scores_db`\n        const url = 'https://my-json-server.typicode.com/jbmbroomfield/phase-2-project-json-server/high_scores_db'\n        const nameText = document.getElementById('name-text')\n        const name = nameText.value\n        const data = {\"name\": name, \"score\": state.score, \"id\": uuidv4()}\n        const configObject = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n        console.log({data})\n        fetch(url, configObject)\n        history.push('/high-scores')\n    }\n\n    return (\n        <div>\n            <h1>Game Over! You scored {state.score} points.</h1>\n            <form onSubmit={submitHighScore}>\n                <input type=\"text\" id=\"name-text\" placeholder=\"Your name\" />\n                <input id=\"submit-button\" type=\"submit\" value=\"Submit Score\" />\n            </form>\n        </div>\n    )\n}","export default function Footer() {\n    return (\n        <div className='footer'>Footer</div>\n    )\n}","import { useContext } from 'react'\nimport Header from '../components/Header'\nimport GameGrid from './GameGrid'\nimport GameOver from '../components/GameOver'\nimport Footer from '../components/Footer'\nimport { rows, columns, stepSize, maxDamage } from '../globalProps'\nimport { Context } from './Store'\nimport { generateItem, choice } from '../random'\nimport startGame from '../functions/startGame'\n\n\nexport default function Game(props) {\n    const [state, setState] = useContext(Context)\n    return (\n        <div className='game'>\n            {/* <Header startGame={() => {startGame(state, setState)}} /> */}\n            {state.gameOver ? <GameOver /> : <GameGrid />}\n            <Footer />\n        </div>\n    )\n}","import { Link } from 'react-router-dom'\n\nexport default function NewGame(props) {\n    return (\n        <div className=\"new-game\">\n            <Link\n                to=\"/phase-2-project/game\"\n                exact\n            >\n                New Game\n            </Link>\n        </div>\n    )\n}","import { Link } from 'react-router-dom'\n\nexport default function NewGame(props) {\n    return (\n        <div className=\"new-game\">\n            <Link\n                to=\"/phase-2-project/high-scores\"\n                exact\n            >\n                High Scores\n            </Link>\n        </div>\n    )\n}","import NewGame from '../components/NewGame'\nimport HighScores from '../components/HighScores'\n\nexport default function Home(props) {\n    return (\n        <div className=\"home\">\n            <NewGame />\n            <HighScores />\n        </div>\n    )\n}","import { useState, useEffect } from 'react'\n\n\nexport default function HighScores(props) {\n    const [state, setState] = useState([])\n    // const url = `http://localhost:3000/high_scores_db`\n    const url = 'https://my-json-server.typicode.com/jbmbroomfield/phase-2-project-json-server/high_scores_db'\n\n    useEffect(() => {\n        fetch(url)\n        .then(response => response.json())\n        .then(json => {setState(json)})\n    }, [])\n\n    const handleClick = () => {\n        // newHighScore('Jim', 997)\n    }\n\n    return (\n        <div>\n            {state.map(d => <div>{d.name}: {d.score}</div>)}\n            <button onClick={handleClick}>Click Me</button>\n        </div>\n    )\n}","import Game from './game/containers/Game'\nimport Store from './game/containers/Store'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Home from './home/containers/Home'\nimport HighScores from './highScores/containers/HighScores'\n\nfunction GameRoute(props) {\n\treturn (\n\t\t<Store>\n\t\t\t<Game />\n\t\t</Store>\n\t)\n}\n\nfunction App(props) {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<Route exact path=\"/phase-2-project\" component={Home} />\n\t\t\t\t<Route exact path=\"/phase-2-project/game\" component={GameRoute} />\n\t\t\t\t<Route exact path=\"/phase-2-project/high-scores\" component={HighScores} />\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}